EXTENDS ZFC

(*
   The class of orders : graphs that are reflexive, anti-symmetric and transitive.
*)
IsOrder(o) == IsGraph(o) /\ IsReflexive(o)
   \* transitivity
   /\ (\A x : \A y : \A z : (<<x,y>> \in o /\ <<y,z>> \in o) => <<x,z>> \in o)
   \* anti-symmetry
   /\ (\A x : \A y : (<<x,y>> \in o /\ <<y,x>> \in o) => x = y)

\* An injection f transports an order o
injectOrder(o,f) == multiApply(parallelFunc(f,f), o)

injectOrderIsOrder == \A o : \A f : (IsOrder(o) /\ IsInjection(f))
   => IsOrder(injectOrder(o,f))
THEOREM injectOrderIsOrder
PROOF
VARIABLES a,b,f,g,m,n,o,u,x,y,multiX;
\* Proof that injectOrder(o,f) is a graph
multiApplySubsetImage   BECAUSE THEOREM;
multiApply(parallelFunc(f,f), o) \subseteq Image(parallelFunc(f,f))   BECAUSE \A(f <- parallelFunc(f,f), multiX <- o);
parallelImage   BECAUSE THEOREM;
Image(parallelFunc(f,f)) = Image(f) \X Image(f)   BECAUSE \A(f <- f, g <- f);
\A x : \A y : x = y => (multiApply(parallelFunc(f,f), o) \subseteq x <=> multiApply(parallelFunc(f,f), o) \subseteq y)   BECAUSE E_SCHEME;
Image(parallelFunc(f,f)) = Image(f) \X Image(f)
   => (multiApply(parallelFunc(f,f), o) \subseteq Image(parallelFunc(f,f)) <=> multiApply(parallelFunc(f,f), o) \subseteq Image(f) \X Image(f))   BECAUSE E_SCHEME;
(multiApply(parallelFunc(f,f), o) \subseteq Image(parallelFunc(f,f)) <=> multiApply(parallelFunc(f,f), o) \subseteq Image(f) \X Image(f))   BECAUSE MODUS_PONENS;
multiApply(parallelFunc(f,f), o) \subseteq Image(f) \X Image(f)   BECAUSE MODUS_PONENS;

\* Proof that injectOrder(o,f) is reflexive
multiApplyExists   BECAUSE THEOREM;
<<x,x>> \in multiApply(parallelFunc(f,f), o) <=> \E u : u \in o /\ <<u, <<x,x>> >> \in parallelFunc(f,f)
   BECAUSE \A(f <- parallelFunc(f,f), multiX <- o, x <- <<x,x>>);
<<x,y>> \in multiApply(parallelFunc(f,f), o) <=> \E u : u \in o /\ <<u, <<x,y>> >> \in parallelFunc(f,f)
   BECAUSE \A(f <- parallelFunc(f,f), multiX <- o, x <- x);

<<x,y>> \in injectOrder(o,f) => \E u : u \in o /\ <<u, <<x,y>> >> \in parallelFunc(f,f)
   BECAUSE EquivToImpl;
(u \in o /\ <<u, <<x,y>> >> \in parallelFunc(f,f)) => <<u, <<x,y>> >> \in parallelFunc(f,f)   BECAUSE DropAndLeft;
<<u, <<x,y>> >> \in parallelFunc(f,f) => <<fst(u),x>> \in f  BECAUSE DropAndLeft;
(u \in o /\ <<u, <<x,y>> >> \in parallelFunc(f,f)) => u \in o   BECAUSE DropAndLeft;
(u \in o /\ <<u, <<x,y>> >> \in parallelFunc(f,f))
   => (<<fst(u),x>> \in f /\ u \in o)   BECAUSE CombineImplicationsEnd;
(\E u : u \in o /\ <<u, <<x,y>> >> \in parallelFunc(f,f))
   => (\E u : <<fst(u),x>> \in f /\ u \in o)   BECAUSE Q_SCHEME;
<<x,y>> \in injectOrder(o,f) => (\E u : <<fst(u),x>> \in f /\ u \in o)   BECAUSE TransitImplication;
(IsOrder(o) /\ (\E u : <<fst(u),x>> \in f /\ u \in o))
   => (\E u : IsOrder(o) /\ (<<fst(u),x>> \in f /\ u \in o))   BECAUSE Q_SCHEME;
IsOrder(o) => (IsGraph(o) /\ IsReflexive(o))   BECAUSE DropAndRight2;
(IsGraph(o) /\ IsReflexive(o)) => IsReflexive(o)   BECAUSE DropAndLeft;
IsOrder(o) => IsReflexive(o)   BECAUSE TransitImplication;
(\A u : u \in o => (<<fst(u), fst(u)>> \in o /\ <<snd(u), snd(u)>> \in o))
   => u \in o => (<<fst(u), fst(u)>> \in o /\ <<snd(u), snd(u)>> \in o)   BECAUSE \A(u <- u);
(<<x,y>> \in injectOrder(o,f) /\ IsOrder(o))
   => ((\E u : <<fst(u),x>> \in f /\ u \in o) /\ IsOrder(o))   BECAUSE MergeImplicationsAnd;
(<<x,y>> \in injectOrder(o,f) /\ IsOrder(o))
   => (\E u : <<fst(u),x>> \in f /\ u \in o /\ IsOrder(o))   BECAUSE TransitImplication;

(\E u : u \in o /\ <<u, <<x,x>> >> \in parallelFunc(f,f)) => <<x,x>> \in injectOrder(o,f)
   BECAUSE EquivToImplReverse;

(<<m,x>> \in f /\ <<m,x>> \in f /\ <<m,m>> \in o)
   => \E n : <<m,x>> \in f /\ <<n,x>> \in f /\ <<m,n>> \in o   BECAUSE \E(n <- m);
\* TODO
QED

disjointOrders == \A u : \A v : (IsOrder(u) /\ IsOrder(v) /\ (u \intersect v = {}))
   => IsOrder(u \union v)
THEOREM disjointOrders

(*
   The class of well-orders, orders where each nonempty subset has a minimum.
   They allow to count :
      - in the well-order, take the minimum and call it zero
      - in the nonzero elements of the well-order, take the minimum and call it one
      - in the elements of the well-order that are neither zero nor one,
        take the minimum and call it two
      - iterate
   
   For this reason, some well-orders (the finite ones) define the natural numbers.
   The well-orders are stable under disjoint unions, which they call addition.
   They are also stable under cartesian products, which they call multiplication.
*)
IsWellOrder(w) == IsOrder(w)
   /\ (\A part : (part # {} /\ (\A x : x \in part => IsDefinedOn(w,x)))
         => \E min : min \in part /\ \A b : b \in part => <<min,b>> \in w)

\* TODO rewrite it as funcProd(identity(dom), const(dom, tag))
pasteTags(dom, tag) == CHOOSE f : IsInjection(f)
   /\ Domain(f) = dom
   /\ \A x : x \in dom => <<x, <<x,tag>> >> \in f

\* Define a well-order on the disjoint union of two well-orders.
\* This order simply pastes v after u.
wellOrderAddition(u,v) == injectOrder(u, pasteTags(Domain(u),{}))
   \union injectOrder(v, pasteTags(Domain(v),ordinalOne))
   \union ((Domain(u)\X{{}}) \X (Domain(v)\X{ordinalOne})) \* this puts v after u

woAddIsWo == \A u : \A v : (IsWellOrder(u) /\ IsWellOrder(v)) => IsWellOrder(wellOrderAddition(u,v))
THEOREM woAddIsWo
PROOF
VARIABLES a,b,g,m,n,u,v,x,y,z;
\* Proof that wellOrderAddition(u,v) is a graph
(m \in Domain(u) /\ n \in Domain(v) /\ x = << <<m,{}>>, <<n,ordinalOne>> >>) => x = << <<m,{}>>, <<n,ordinalOne>> >>   BECAUSE DropAndLeft;
x = << <<m,{}>>, <<n,ordinalOne>> >> => ((\E a : \E b : x = <<a,b>>) <=> (\E a : \E b : << <<m,{}>>, <<n,ordinalOne>> >> = <<a,b>>))   BECAUSE E_SCHEME;
(<< <<m,{}>>, <<n,ordinalOne>> >> = << <<m,{}>>, <<n,ordinalOne>> >>
   => \E a : \E b : << <<m,{}>>, <<n,ordinalOne>> >> = <<a,b>>)   BECAUSE \E(a <- <<m,{}>>, b <- <<n,ordinalOne>>);
<< <<m,{}>>, <<n,ordinalOne>> >> = << <<m,{}>>, <<n,ordinalOne>> >>   BECAUSE E_SCHEME;
\E a : \E b : << <<m,{}>>, <<n,ordinalOne>> >> = <<a,b>>   BECAUSE MODUS_PONENS;
x = << <<m,{}>>, <<n,ordinalOne>> >> => (\E a : \E b : x = <<a,b>>)   BECAUSE ImplyEquivTrue;
(m \in Domain(u) /\ n \in Domain(v) /\ x = << <<m,{}>>, <<n,ordinalOne>> >>) => (\E a : \E b : x = <<a,b>>)   BECAUSE TransitImplication;
(m \in Domain(u) /\ n \in Domain(u) /\ x = << <<m,{}>>, <<n,{}>> >> /\ <<m,n>> \in u)
   => (m \in Domain(u) /\ n \in Domain(u) /\ x = << <<m,{}>>, <<n,{}>> >>)   BECAUSE DropAndRight;
(m \in Domain(u) /\ n \in Domain(u) /\ x = << <<m,{}>>, <<n,{}>> >>) => x = << <<m,{}>>, <<n,{}>> >> BECAUSE DropAndLeft;
x = << <<m,{}>>, <<n,{}>> >> => ((\E a : \E b : x = <<a,b>>) <=> (\E a : \E b : << <<m,{}>>, <<n,{}>> >> = <<a,b>>))   BECAUSE E_SCHEME;
(<< <<m,{}>>, <<n,{}>> >> = << <<m,{}>>, <<n,{}>> >>
   => \E a : \E b : << <<m,{}>>, <<n,{}>> >> = <<a,b>>)   BECAUSE \E(a <- <<m,{}>>, b <- <<n,{}>>);
<< <<m,{}>>, <<n,{}>> >> = << <<m,{}>>, <<n,{}>> >>   BECAUSE E_SCHEME;
\E a : \E b : << <<m,{}>>, <<n,{}>> >> = <<a,b>>   BECAUSE MODUS_PONENS;
x = << <<m,{}>>, <<n,{}>> >> => (\E a : \E b : x = <<a,b>>)   BECAUSE ImplyEquivTrue;
(m \in Domain(u) /\ n \in Domain(u) /\ x = << <<m,{}>>, <<n,{}>> >>) => (\E a : \E b : x = <<a,b>>)   BECAUSE TransitImplication;
(m \in Domain(u) /\ n \in Domain(u) /\ x = << <<m,{}>>, <<n,{}>> >> /\ <<m,n>> \in u) => (\E a : \E b : x = <<a,b>>)   BECAUSE TransitImplication;
(m \in Domain(v) /\ n \in Domain(v) /\ x = << <<m,ordinalOne>>, <<n,ordinalOne>> >> /\ <<m,n>> \in v)
   => (m \in Domain(v) /\ n \in Domain(v) /\ x = << <<m,ordinalOne>>, <<n,ordinalOne>> >>)   BECAUSE DropAndRight;
(m \in Domain(v) /\ n \in Domain(v) /\ x = << <<m,ordinalOne>>, <<n,ordinalOne>> >>) => x = << <<m,ordinalOne>>, <<n,ordinalOne>> >> BECAUSE DropAndLeft;
x = << <<m,ordinalOne>>, <<n,ordinalOne>> >> => ((\E a : \E b : x = <<a,b>>) <=> (\E a : \E b : << <<m,ordinalOne>>, <<n,ordinalOne>> >> = <<a,b>>))   BECAUSE E_SCHEME;
(<< <<m,ordinalOne>>, <<n,ordinalOne>> >> = << <<m,ordinalOne>>, <<n,ordinalOne>> >>
   => \E a : \E b : << <<m,ordinalOne>>, <<n,ordinalOne>> >> = <<a,b>>)   BECAUSE \E(a <- <<m,ordinalOne>>, b <- <<n,ordinalOne>>);
<< <<m,ordinalOne>>, <<n,ordinalOne>> >> = << <<m,ordinalOne>>, <<n,ordinalOne>> >>   BECAUSE E_SCHEME;
\E a : \E b : << <<m,ordinalOne>>, <<n,ordinalOne>> >> = <<a,b>>   BECAUSE MODUS_PONENS;
x = << <<m,ordinalOne>>, <<n,ordinalOne>> >> => (\E a : \E b : x = <<a,b>>)   BECAUSE ImplyEquivTrue;
(m \in Domain(v) /\ n \in Domain(v) /\ x = << <<m,ordinalOne>>, <<n,ordinalOne>> >>) => (\E a : \E b : x = <<a,b>>)   BECAUSE TransitImplication;
(m \in Domain(v) /\ n \in Domain(v) /\ x = << <<m,ordinalOne>>, <<n,ordinalOne>> >> /\ <<m,n>> \in v) => (\E a : \E b : x = <<a,b>>)   BECAUSE TransitImplication;
((m \in Domain(u) /\ n \in Domain(v) /\ x = << <<m,{}>>, <<n,ordinalOne>> >>)
     \/ (m \in Domain(u) /\ n \in Domain(u) /\ x = << <<m,{}>>, <<n,{}>> >> /\ <<m,n>> \in u))
  => (\E a : \E b : x = <<a,b>>)   BECAUSE CombineImplicationsStart;
((m \in Domain(u) /\ n \in Domain(v) /\ x = << <<m,{}>>, <<n,ordinalOne>> >>)
     \/ (m \in Domain(u) /\ n \in Domain(u) /\ x = << <<m,{}>>, <<n,{}>> >> /\ <<m,n>> \in u)
     \/ (m \in Domain(v) /\ n \in Domain(v) /\ x = << <<m,ordinalOne>>, <<n,ordinalOne>> >> /\ <<m,n>> \in v))
  => (\E a : \E b : x = <<a,b>>)   BECAUSE CombineImplicationsStart;
(\E n : (m \in Domain(u) /\ n \in Domain(v) /\ x = << <<m,{}>>, <<n,ordinalOne>> >>)
     \/ (m \in Domain(u) /\ n \in Domain(u) /\ x = << <<m,{}>>, <<n,{}>> >> /\ <<m,n>> \in u)
     \/ (m \in Domain(v) /\ n \in Domain(v) /\ x = << <<m,ordinalOne>>, <<n,ordinalOne>> >> /\ <<m,n>> \in v))
  => (\E n : \E a : \E b : x = <<a,b>>)   BECAUSE Q_SCHEME;
\* IsInWellOrderAddition(x,u,v) => (\E m : \E n : \E a : \E b : x = <<a,b>>)   BECAUSE Q_SCHEME;
\* wellOrderAdditionExists   BECAUSE THEOREM;
\* x \in wellOrderAddition(u,v) <=> IsInWellOrderAddition(x,u,v)   BECAUSE \A(u <- u, v <- v, x <- x);
\* x \in wellOrderAddition(u,v) => IsInWellOrderAddition(x,u,v)   BECAUSE EquivToImpl;
\* x \in wellOrderAddition(u,v) => (\E m : \E n : \E a : \E b : x = <<a,b>>)   BECAUSE TransitImplication;
(\E m : \E n : \E a : \E b : x = <<a,b>>) => (\E n : \E a : \E b : x = <<a,b>>)   BECAUSE Q_SCHEME;
(\E n : \E a : \E b : x = <<a,b>>) => (\E a : \E b : x = <<a,b>>)   BECAUSE Q_SCHEME;
\* x \in wellOrderAddition(u,v) => (\E n : \E a : \E b : x = <<a,b>>)   BECAUSE TransitImplication;
\* x \in wellOrderAddition(u,v) => (\E a : \E b : x = <<a,b>>)   BECAUSE TransitImplication;
IsGraph(wellOrderAddition(u,v))   BECAUSE GENERALIZATION;

\* Proof that wellOrderAddition is reflexive
   \* Proof that (IsOrder(u) /\ m \in Domain(u) /\ x = << <<m,{}>>, <<m,{}>> >>) => IsInWellOrderAddition(x,u,v)
domainExists   BECAUSE THEOREM;
m \in Domain(u) <=> IsDefinedOn(u,m)   BECAUSE \A(g <- u, x <- m);
QED


(*
   At the moment, the addition and multiplication of well-orders are not commutative,
   even for finite ones. wellOrderAddition(u,v) and wellOrderAddition(v,u) are
   isomorphic as well-orders, but not equal.

   It would be convenient to fix one representative in each well-order isomorphy
   class, so that addition and multiplication get their usual properties. The
   ordinals achieve that, they find canonical elements for the well-orders' domains.
*)
TransitiveSet(x) == \A a : a \in x => a \subseteq x

(*
   Predicate asserting that the set x is strictly well-ordered by the membership
   relation \in. In those sets, \in behaves like < on the natural numbers. Actually,
   those sets start with the natural numbers and \in will be the definition of <.
*)
WellOrderedByIn(x) == (\A a : a \in x => a \notin a) \* irreflexive
   /\ (\A a : \A b : \A c : (a \in x /\ b \in x /\ c \in x /\ a \in b /\ b \in c) => a \in c) \* transitive
   /\ (\A p : (p # {} /\ p \subseteq x) => \E a : a \in p /\ \A b : b \in p => (b = a \/ a \in b)) \* existence of minimums

(*
   The class of ordinals, which starts with the natural numbers. This predicate
   rigorously defines what could be naively stated as
      0 = {}
      n = { 0, ..., n-1 }
*)
IsOrdinal(o) == TransitiveSet(o) /\ WellOrderedByIn(o)

\* The empty set is the smallest ordinal, called "zero" as an ordinal
ordinalZero == IsOrdinal( {} )
THEOREM ordinalZero
PROOF
\* Just check implications starting with the false formula x \in {}
VARIABLES a,b,c,p,x;
\* Proof of TransitiveSet( {} )
emptySetExists   BECAUSE THEOREM;
a \notin {}   BECAUSE \A(x <- a);
a \in {} => a \subseteq {}   BECAUSE Explosion;
TransitiveSet( {} )   BECAUSE GENERALIZATION;

\* Proof of irreflexive
a \in {} => a \notin a   BECAUSE Explosion;
\A a : a \in {} => a \notin a   BECAUSE GENERALIZATION;

\* Proof of transitive order
(a \in {} /\ b \in {} /\ c \in {} /\ a \in b /\ b \in c)
   => (a \in {} /\ b \in {} /\ c \in {})   BECAUSE DropAndRight2;
(a \in {} /\ b \in {} /\ c \in {}) => a \in {}   BECAUSE DropAndRight2;
(a \in {} /\ b \in {} /\ c \in {} /\ a \in b /\ b \in c) => a \in {}   BECAUSE TransitImplication;
a \in {} => a \in c   BECAUSE Explosion;
(a \in {} /\ b \in {} /\ c \in {} /\ a \in b /\ b \in c) => a \in c   BECAUSE TransitImplication;
\A a : \A b : \A c : (a \in {} /\ b \in {} /\ c \in {} /\ a \in b /\ b \in c) => a \in c   BECAUSE GENERALIZATION;

\* Proof of minimums
includedInEmpty   BECAUSE THEOREM;
p \subseteq {} => p = {}   BECAUSE \A(x <- p);
(p \subseteq {} => p = {}) <=> (~(p \subseteq {}) \/ p = {})   BECAUSE BooleanImplication;
~(p \subseteq {}) \/ p = {}   BECAUSE MODUS_PONENS;
p = {} \/ ~(p \subseteq {})   BECAUSE OrSymmetry;
~~(p = {} \/ ~(p \subseteq {}))   BECAUSE IntroNotNot;
~(p = {} \/ ~(p \subseteq {})) => \E a : a \in p /\ \A b : b \in p => (b = a \/ a \in b)   BECAUSE Explosion;
~(p = {} \/ ~(p \subseteq {})) <=> (p # {} /\ ~~(p \subseteq {}))   BECAUSE DistribNotOr;
(p # {} /\ ~~(p \subseteq {})) => ~(p = {} \/ ~(p \subseteq {}))   BECAUSE EquivToImplReverse;
(p # {} /\ ~~(p \subseteq {})) => \E a : a \in p /\ \A b : b \in p => (b = a \/ a \in b)   BECAUSE TransitImplication;
p \subseteq {} => ~~(p \subseteq {})   BECAUSE IntroNotNot;
p # {} => p # {}   BECAUSE ImplyOneself;
(p # {} /\ p \subseteq {}) => (p # {} /\ ~~(p \subseteq {}))   BECAUSE MergeImplicationsAnd;
(p # {} /\ p \subseteq {}) => \E a : a \in p /\ \A b : b \in p => (b = a \/ a \in b)   BECAUSE TransitImplication;
\A p : (p # {} /\ p \subseteq {}) => \E a : a \in p /\ \A b : b \in p => (b = a \/ a \in b)   BECAUSE GENERALIZATION;

\* Conclude with PT6
(\A a : a \in {} => a \notin a)
   /\ (\A a : \A b : \A c : (a \in {} /\ b \in {} /\ c \in {} /\ a \in b /\ b \in c) => a \in c)   BECAUSE IntroAndRight;
WellOrderedByIn( {} )   BECAUSE IntroAndRight;
ordinalZero   BECAUSE IntroAndRight;
QED

\* The +1 operation on ordinals
successor(o) == o \union { o }

ordinalSuccessorStable == \A o : IsOrdinal(o) => IsOrdinal( successor(o) )
THEOREM ordinalSuccessorStable

IsLimitOrdinal(o) == IsOrdinal(o) /\ o # {} /\ \A x : x \in o => o # successor(x)

(*
   Definition of the set of natural numbers. They are the finite ordinals.
*)
Nat == CHOOSE o : IsLimitOrdinal(o) /\ \A x : x \in o => ~IsLimitOrdinal(x)
naturalNumbersExist == IsLimitOrdinal(Nat) /\ \A x : x \in Nat => ~IsLimitOrdinal(x)
THEOREM naturalNumbersExist

(*
   The addition function on natural numbers. It could be declared as an operator
   natAddition(x,y) = CHOOSE z : ...
   however it would be recursive (or use well-orders). Keep it a simple function here.
*)
natAddition == CHOOSE f : IsFunction(f)
   /\ (\A x : x \in Nat \X Nat => \E y : y \in Nat /\ <<x,y>> \in f) \* f : Nat \X Nat -> Nat
   /\ (\A x : x \in Nat => << <<x,{}>>, x >> \in f) \* f(x,0) = x
   /\ (\A x : \A y : (x \in Nat /\ y \in Nat)
         => \E u : << <<x,y>>, u >> \in f /\ << <<x,successor(y)>>, successor(u) >> \in f) \* f(x,y+1) = f(x,y)+1

natAdditionExists == IsFunction(natAddition)
   /\ (\A x : x \in Nat \X Nat => \E y : y \in Nat /\ <<x,y>> \in natAddition)
   /\ (\A x : x \in Nat => << <<x,{}>>, x >> \in natAddition)
   /\ (\A x : \A y : (x \in Nat /\ y \in Nat)
         => \E u : << <<x,y>>, u >> \in natAddition /\ << <<x,successor(y)>>, successor(u) >> \in natAddition)

THEOREM natAdditionExists

(*
   The multiplication function on natural numbers.
*)
natMultiplication == CHOOSE f : IsFunction(f)
   /\ (\A x : x \in Nat \X Nat => \E y : y \in Nat /\ <<x,y>> \in f) \* f : Nat \X Nat -> Nat
   /\ (\A x : x \in Nat => << <<x,{}>>, {} >> \in f) \* f(x,0) = 0
   /\ (\A x : \A y : (x \in Nat /\ y \in Nat)
         => \E u : \E v : << <<x,y>>, u >> \in f /\ << <<x,successor(y)>>, v>> \in f
	                  /\ << <<u,x>>, v >> \in natAddition) \* u=f(x,y) and v=f(x,y+1) and v=u+x, ie f(x,y+1) = f(x,y)+x

natMultiplicationExists == IsFunction(natMultiplication)
   /\ (\A x : x \in Nat \X Nat => \E y : y \in Nat /\ <<x,y>> \in natMultiplication)
   /\ (\A x : x \in Nat => << <<x,{}>>, {} >> \in natMultiplication)
   /\ (\A x : \A y : (x \in Nat /\ y \in Nat)
         => \E u : \E v : << <<x,y>>, u >> \in natMultiplication /\ << <<x,successor(y)>>, v>> \in natMultiplication /\ << <<u,x>>, v >> \in natAddition)

THEOREM natMultiplicationExists