EXTENDS Naturals

IsMonoid(M,op) == IsApplication(op, M \X M, M)
   \* Associativity
   /\ (\A a : \A b : \A c : a \in M /\ b \in M /\ c \in M => op[op[a,b],c] = op[a,op[b,c]] )
   \* Neutral element
   /\ (\E e : e \in M /\ \A a : a \in M => op[a,e] = a /\ op[e,a] = a)

(*
   The unique neutral element of an operation : the element
   that leaves all other elements unchanged, to the left
   and to the right.
*)
Neutral(op) == CHOOSE_UNIQUE e : \A z : z = e <=>
   \A a : (<<a,z>> \in Domain(op) => op[a,z] = a) /\ (<<z,a>> \in Domain(op) => op[z,a] = a)

neutralMonoidExists == \A M : \A op : IsMonoid(M,op) =>
   \A a : a \in M => op[a,Neutral(op)] = a /\ op[Neutral(op),a] = a
THEOREM neutralMonoidExists
PROOF
\* If there were 2 neutral elements e and e' in the monoid, then
\* op[e,e'] = e = e' by neutrality of both e and e'.
VARIABLES a,e,M,op;
h(e,M,op) == IsMonoid(M,op) /\ (e \in M /\ \A a : a \in M => op[a,e] = a /\ op[e,a] = a);
h(e,M,op) => IsMonoid(M,op)   BECAUSE S12;
IsMonoid(M,op) => IsApplication(op, M \X M, M)  BECAUSE S13;
IsApplication(op, M \X M, M) => Domain(op) = M \X M BECAUSE S23;
h(e,M,op) => Domain(op) = M \X M BECAUSE TI2;

\* Prove that h(e,M,op) => (<<a,e>> \in Domain(op) => op[a,e] = a) /\ (<<e,a>> \in Domain(op) => op[e,a] = a)
\A x : \A y : x = y => ((<<a,e>> \in x => op[a,e] = a) /\ (<<e,a>> \in x => op[e,a] = a) <=> (<<a,e>> \in y => op[a,e] = a) /\ (<<e,a>> \in y => op[e,a] = a))   BECAUSE E_SCHEME;
Domain(op) = M \X M => ((<<a,e>> \in Domain(op) => op[a,e] = a) /\ (<<e,a>> \in Domain(op) => op[e,a] = a) <=> (<<a,e>> \in M \X M => op[a,e] = a) /\ (<<e,a>> \in M \X M => op[e,a] = a))   BECAUSE \A(x <- Domain(op), y <- M \X M);
h(e,M,op) => ((<<a,e>> \in Domain(op) => op[a,e] = a) /\ (<<e,a>> \in Domain(op) => op[e,a] = a) <=> (<<a,e>> \in M \X M => op[a,e] = a) /\ (<<e,a>> \in M \X M => op[e,a] = a))   BECAUSE TI;
\* TODO
QED

(* TODO IsMonoid(Nat,natAddition), product monoid, group of a regular monoid *)