\* Those are propositional tautologies, ie formulas true with any boolean
\* assignments of the variables.

\* Propositional tautologies serve as axiom schemes for first-order logic
\* proofs : any substitution of first-order formulas in them is an axiom.
\* They are named for easier invocations in first-order proofs.

PT1(a,b) == a => (b => a)
PROPO_TAUTO PT1

PT2(a,b,c) == (a => (b => c)) => ((a => b) => (a => c))
PROPO_TAUTO PT2

IntroNotNot(a) == a => ~~a
PROPO_TAUTO IntroNotNot

DropNotNot(a) == ~~a => a
PROPO_TAUTO DropNotNot

Contraposition(a,b) == (a => b) => (~b => ~a)
PROPO_TAUTO Contraposition

IntroAndRight(a,b) == a => (b => (a /\ b))
PROPO_TAUTO IntroAndRight

IntroAndLeft(a,b) == a => (b => (b /\ a))
PROPO_TAUTO IntroAndLeft

DropAndRight(a,b) == (a /\ b) => a
PROPO_TAUTO DropAndRight

DropAndRight2(a,b,c) == (a /\ b /\ c) => a
PROPO_TAUTO DropAndRight2

DropAndRight3(a,b,c,d) == (a /\ b /\ c /\ d) => a
PROPO_TAUTO DropAndRight3

DropAndBoth(a,b,c) == (a /\ b /\ c) => b
PROPO_TAUTO DropAndBoth

\* DropAndLeft2 is included in DropAndLeft, because of left-associativity
DropAndLeft(a,b) == (a /\ b) => b
PROPO_TAUTO DropAndLeft

IntroOrLeft(a,b) == a => (a \/ b)
PROPO_TAUTO IntroOrLeft

IntroOrRight(a,b) == b => (a \/ b)
PROPO_TAUTO IntroOrRight

ContradictionEquiv(a,h) == (h => (a <=> ~a)) => ~h
PROPO_TAUTO ContradictionEquiv

ContradictionAnd(a,h) == (h => (a /\ ~a)) => ~h
PROPO_TAUTO ContradictionAnd

\* Transitivity of implication
TI(a,b,c) == (a => b) => ((b => c) => (a => c))
PROPO_TAUTO TI

TIE(a,b,c) == (a => b) => ((b <=> c) => (a => c))
PROPO_TAUTO TIE

TransitEquiv(a,b,c) == (a <=> b) => ((b <=> c) => (a <=> c))
PROPO_TAUTO TransitEquiv

TransitEquiv2(a,b,c) == (a <=> b) => ((c <=> b) => (c <=> a))
PROPO_TAUTO TransitEquiv2

TwoImplications(a,b,h) == (h => a) => ((h => b) => (h => (a /\ b)))
PROPO_TAUTO TwoImplications

EquivToImpl(a,b) == (a <=> b) => (a => b)
PROPO_TAUTO EquivToImpl

EquivToImplReverse(a,b) == (a <=> b) => (b => a)
PROPO_TAUTO EquivToImplReverse

IntroEquiv(a,b) == (a => b) => ((b => a) => (a <=> b))
PROPO_TAUTO IntroEquiv

HypoIntroEquiv(a,b,h) == (h => (a => b)) => ((h => (b => a)) => (h => (a <=> b)))
PROPO_TAUTO HypoIntroEquiv

IntroEquivAnd(a,b) == ((a => b) /\ (b => a)) => (a <=> b)
PROPO_TAUTO IntroEquivAnd

AssocAnd(a,b,c) == ((a /\ b) /\ c) => (a /\ (b /\ c))
PROPO_TAUTO AssocAnd

AssocAndLeft(a,b,c) == (a /\ (b /\ c)) => ((a /\ b) /\ c)
PROPO_TAUTO AssocAndLeft

ImplySelf(a) == a => a
PROPO_TAUTO ImplySelf

EquivTrue(a,t) == t => ((a <=> t) => a)
PROPO_TAUTO EquivTrue

ImplyEquivTrue(a,b,t) == t => ((b => (a <=> t)) => (b => a))
PROPO_TAUTO ImplyEquivTrue

ImplyEquivSelf(a,b) == (a => (b <=> a)) => (a => b)
PROPO_TAUTO ImplyEquivSelf

TrueEquiv(a,t) == t => ((t <=> a) => a)
PROPO_TAUTO TrueEquiv

ImplyTrueEquiv(a,b,t) == t => ((b => (t <=> a)) => (b => a))
PROPO_TAUTO ImplyTrueEquiv

ImplyFalse(a,f) == ~f => ((a => f) => ~a)
PROPO_TAUTO ImplyFalse

AddHypothesis(a,b,h) == (a => b) => ((h => a) => (h => b))
PROPO_TAUTO AddHypothesis

ExcludedMiddle(a) == a \/ ~a
PROPO_TAUTO ExcludedMiddle

BooleanImplication(a,b) == (a => b) <=> (~a \/ b)
PROPO_TAUTO BooleanImplication

ImplyExcludedMiddle(a,b,c) == (a => (~b => c)) => (a => (b \/ c))
PROPO_TAUTO ImplyExcludedMiddle

\* This is better than f => (~f => b), because when the negation is needed,
\* it is easier to write ~~f BECAUSE PT3 than the full PT4 and a TransitImplication.
Explosion(f,b) == ~f => (f => b)
PROPO_TAUTO Explosion

MergeImplicationsAnd(a,b,c,d) == (a => b) => ((c => d) => ((a /\ c) => (b /\ d)))
PROPO_TAUTO MergeImplicationsAnd

MergeImplicationsAnd2(a,b,c,d) == ((a => b) /\ (c => d)) => ((a /\ c) => (b /\ d))
PROPO_TAUTO MergeImplicationsAnd2

MergeImplicationsOr(a,b,c,d) == (a => b) => ((c => d) => ((a \/ c) => (b \/ d)))
PROPO_TAUTO MergeImplicationsOr

CombineImplicationsStart(a,b,c) == (a => c) => ((b => c) => ((a \/ b) => c))
PROPO_TAUTO CombineImplicationsStart

\* Combine implications with And
CIA(a,b,c) == (a => b) => ((a => c) => (a => (b /\ c)))
PROPO_TAUTO CIA

HypoImplToAnd(a,b,c) == (a => (b => c)) => ((a /\ b) => c)
PROPO_TAUTO HypoImplToAnd

HypoAndToImpl(a,b,c) == ((a /\ b) => c) => (a => (b => c))
PROPO_TAUTO HypoAndToImpl

HypoEquivToAnd(a,b,c) == (a => (b <=> c)) => ((a /\ b) => c)
PROPO_TAUTO HypoEquivToAnd

HypoEquivToAndReverse(a,b,c) == (a => (b <=> c)) => ((a /\ c) => b)
PROPO_TAUTO HypoEquivToAndReverse

SwitchHypos(a,b,c) == (a => (b => c)) => (b => (a => c))
PROPO_TAUTO SwitchHypos

AndSymmetry(a,b) == (a /\ b) => (b /\ a)
PROPO_TAUTO AndSymmetry

AndCycle(a,b,c) == (a /\ b /\ c) => (c /\ a /\ b)
PROPO_TAUTO AndCycle

OrSymmetry(a,b) == (a \/ b) => (b \/ a)
PROPO_TAUTO OrSymmetry

EquivSymmetry(a,b) == (a <=> b) => (b <=> a)
PROPO_TAUTO EquivSymmetry

DistribNotOr(a,b) == ~(a \/ b) => (~a /\ ~b)
PROPO_TAUTO DistribNotOr

DistribNotAnd(a,b) == ~(a /\ b) => (~a \/ ~b)
PROPO_TAUTO DistribNotAnd

DistribAndOrLeft(a,b,c) == (a /\ (b \/ c)) => ((a /\ b) \/ (a /\ c))
PROPO_TAUTO DistribAndOrLeft

DistribAndOrRight(a,b,c) == ((b \/ c) /\ a) => ((b /\ a) \/ (c /\ a))
PROPO_TAUTO DistribAndOrRight

DistribAndImpl(a,b,c) == ((a => b) /\ c) => (a => (b /\ c))
PROPO_TAUTO DistribAndImpl

FactorOrAndRight(a,b,c) == ((a \/ c) /\ (b \/ c)) => ((a /\ b) \/ c)
PROPO_TAUTO FactorOrAndRight

FactorNotOr(a,b) == (~a /\ ~b) => ~(a \/ b)
PROPO_TAUTO FactorNotOr

FactorNotAnd(a,b) == (~a \/ ~b) => ~(a /\ b)
PROPO_TAUTO FactorNotAnd

FactorAndImpl(a,b,c) == ((a => c) /\ (b => c)) => ((a \/ b) => c)
PROPO_TAUTO FactorAndImpl

OrFalseStart(a,f) == ~f => ((a \/ f) => a)
PROPO_TAUTO OrFalseStart

FalseOrStart(a,f) == ~f => ((f \/ a) => a)
PROPO_TAUTO FalseOrStart

TrueAndStart(a,t) == t => ((t /\ a) => a)
PROPO_TAUTO TrueAndStart

OrSelf(a) == (a \/ a) => a
PROPO_TAUTO OrSelf

AndSelf(a) == a => (a /\ a)
PROPO_TAUTO AndSelf

\* Tautology useful for the separation axiom scheme
SeparationTauto(a,b,c) == (a => b) => ((c <=> (b /\ a)) => (c <=> a))
PROPO_TAUTO SeparationTauto

KillMiddleHypo(h,a,b) == (h => a) => ((h => (a => b)) => (h => b))
PROPO_TAUTO KillMiddleHypo
